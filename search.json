[{"title":"Python入门笔记1（数据类型及相关操作）","url":"/2023/11/12/Python%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%A4%84%E7%90%86/","content":"1.引言Python中常见的标准数据类型有：Number、String、bool、List、Tuple、Set、Dictionary\n其中有不可变数据（3个）和可变数据（3个）\n\n\n\n\n\n\n\n\n可变数据\nList、Dictionary、Set\n\n\n不可变数据\nNumber、String、Tuple\n\n\n2.具体描述及相关操作2.1 Number（数）在Python中，Number类支持int、float、bool、complex四种类型。\n2.1.1 Complex类型Python中支持Complex（复数）类型：\na + bj 或 complex(a, b)\n\n复数由实部a和虚部b组成（表达方式如上）\n2.1.2 浮点型的科学计数法E是指数，指底数为10，E后边的数就是10的多少次幂。\n2.2 String（字符串）2.2.1字符串的特点Python中的字符串用单引号‘或双引号“括起来，同时使用反斜杠\\转义特殊字符。字符串是不可变数据（但可以通过切片和拼接修改字符串），其本身可以运用大部分运算符（或操作符）。\n2.2.2 字符串的切片和拼接“切片”和“拼接”将在List&amp;Tuple章节中详细解释。接下来是实例：\n&gt;&gt;&gt; str1 = &#x27;Hello,world!&#x27;&gt;&gt;&gt; str1 = str1[:5] + &#x27;,Python!&#x27;&gt;&gt;&gt; str1&#x27;Hello,Python!&#x27;\n\n这里需要注意的是，切片操作其实只改变了一个str1的副本（或拷贝），即原来的旧字符串其实还在，只不过我们将变量名与新字符串链接。旧字符串失去了变量名的引用后，就被Python的垃圾回收机制释放掉了。\n2.3 Bool（布尔类型）在Python中，bool是int的子类，True和False可以和数字相加，可以通过is来判断类型：\n&gt;&gt;&gt; issubclass(bool, int)True\n\nbool即True或False。\n布尔类型可以用来控制程序的流程，比如判断某个条件是否成立，或者在某个条件满足时执行某段代码。\n注意：在Python中，所有非零的数字和非空的字符串、列表、元组等数据类型都被视为True，只有0、列表、空元组等被视为False\n2.4 类型转换及获得关于类型的信息2.4.1 类型转换主要为int、float、str之间的转换，语法：\n&gt;&gt;&gt; x = 6.40&gt;&gt;&gt; x = int(x)&gt;&gt;&gt; x6\n\n2.4.2 获得关于类型的信息\ntype( )\n\nisinstance( ) [建议]：\nisintance(待确定数据,数据类型)通常用print输出\n\n2.5 List（列表）&amp; Tuple（元组）列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）\n2.5.1 创建列表​\t变量名 &#x3D; [val1, val2, val3,…]\n​\tempty &#x3D; []\n2.5.2 添加元素\nlist.attend( ) 加（）中元素至列表末（只支持单个参数）\nlist.extend( ) 加（）中列表扩充至另一列表末\nlist.insert(x, e) 第一个参数指定待插入的位置；第二个参数指定待插入的元素，例：\n\n&gt;&gt;&gt; number = [0, 1, 2, 3, 4]&gt;&gt;&gt; number.insert(-1, 3.5)&gt;&gt;&gt; number[0, 1, 2, 3, 3.5, 4]\n\n2.5.3 获取元素\n语法：list[索引值]\n\n访问末元素：\n1. n = len(list)   n = int(n)   list(n - 1)2.list[-1]\n\n2.5.4 调换元素1(正经). temp = list[1]\t\tlist[1] = list[3]\t\tlist[3] = temp2(偷懒). list[1], list[3] = list[3], list[1]\n\n2.5.5 随机输出import randomlist = [1, 2, 3, 4, 5, 6, 7, 8]random.choice(list)\n\n2.5.6 删除元素\nremove( ): list.remove(val_name) 直接删除\npop( ): list.pop(index_num) 删除最末元素，并输出该元素\ndel: del list[index_num] 直接删除（为单独语句）\n\n2.5.7 Slice（列表切片）实际上，切片不会修改列表自身的组成结构，而是创建了部分列表的副本\n语法：\nlist[start, stop, step]\n\n当使用list[ : : -1]时，可以实现列表的反转。\n注意：对列表切片的操作会直接作用于原始列表以确保自身有意义\nlist = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n删除切片元素:\n&gt;&gt;&gt; del list[ : : 2][2, 4, 6, 8]\n\n切片赋值：\n&gt;&gt;&gt; list[0: 2] = [0, 8][0, 8, 3, 4, 5, 6, 7, 8, 9]\n\n2.5.8 遍历列表for element in list:\tif element ____:\t\tprint(element)\n\n2.5.9 关于列表的方法count( ) 方法：统计某个元素在列表中出现的次数\nindex( ) 方法：返回某个元素在列表中第一次出现的索引值\nlist.index(x, start, stop)\n\nreverse( ) 方法：将整个列表翻转\nsort( )方法：对列表元素进行排序\nsort(func, key, reverse)\n\n","tags":["Python入门"]}]