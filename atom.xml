<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yu‘s Nomadic City</title>
  
  <subtitle>我的代码小栈</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-11-14T19:47:10.667Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Francis Wong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python入门笔记1</title>
    <link href="http://example.com/2023/11/15/Python%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B01/"/>
    <id>http://example.com/2023/11/15/Python%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B01/</id>
    <published>2023-11-14T18:12:33.000Z</published>
    <updated>2023-11-14T19:47:10.667Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Python简介"><a href="#Python简介" class="headerlink" title="Python简介"></a>Python简介</h2><h3 id="Python的起源和发展"><a href="#Python的起源和发展" class="headerlink" title="Python的起源和发展"></a>Python的起源和发展</h3><p>Python是一种<strong>高级编程语言</strong>，它的起源可以追溯到上世纪90年代初。Python的创造者是<strong>Guido van Rossum</strong>，他在1989年开始着手开发这门语言，并于1991年发布了它的第一个版本。</p><p>起初，Guido van Rossum设计Python的初衷是创建一种易于阅读和编写的编程语言，强调<strong>代码的简洁性和可读性</strong>。他希望Python成为一门功能强大且易用的语言，适用于各种应用场景。</p><p>Python的发展历经了几个重要的版本更新。1994年发布的Python 1.0引入了很多语言特性，如模块化和异常处理。随着时间的推移，Python逐渐成为一种广泛使用的编程语言，并在不同领域得到应用。</p><p>2000年发布的Python 2.0引入了一些重要的改进和新特性，如列表推导式、垃圾回收机制和内存管理的改进。Python 2.x系列在接下来的十多年中广泛使用，同时也推动了Python在业界的普及。</p><p>然而，Python的发展并没有止步于此。为了改进语言的一些缺点和限制，Guido van Rossum领导的Python社区于2008年发布了Python 3.0，该版本引入了一系列重要的改变和向后不兼容的特性。Python 3.x系列逐渐取代了Python 2.x，并成为目前主流的Python版本。</p><p>Python的发展也得益于广泛的社区支持和包括科学计算、Web开发、人工智能和数据分析等领域的丰富库和框架。今天，Python已经成为一种多功能、简洁易读的编程语言，受到了全球开发者和科研人员的欢迎和广泛应用。</p><h3 id="Python的特点和优势"><a href="#Python的特点和优势" class="headerlink" title="Python的特点和优势"></a>Python的特点和优势</h3><p>Python是一种高级编程语言，具有以下特点和优势：</p><ol><li><p><strong>简洁易读</strong>：Python代码以简洁的语法编写，易于理解和阅读，使开发过程更高效。它强调代码的可读性，使得团队合作变得更加容易。</p></li><li><p><strong>跨平台性</strong>：Python可以在多个操作系统上运行，包括Windows、Mac和Linux等。这使得开发人员可以在不同的平台上开发和运行他们的应用程序。</p></li><li><p><strong>大量的库和框架</strong>：Python拥有一个庞大的第三方库和框架生态系统，如NumPy、Pandas、Django和Flask等，可以满足各种不同领域的开发需求。这些库和框架可以帮助开发人员快速构建功能强大的应用程序。</p></li><li><p><strong>面向对象编程（OOP）支持</strong>：Python支持面向对象编程，这意味着开发人员可以使用类和对象进行代码组织和重用。这种编程方法提高了代码的可维护性，并允许开发人员以更加抽象和模块化的方式思考问题。</p></li><li><p><strong>强大的社区支持</strong>：Python拥有一个庞大而活跃的社区，在全球范围内有大量的开发人员贡献代码、分享经验和解决问题。这使得开发人员能够轻松地获取支持和资源，加速开发过程。</p></li><li><p><strong>可扩展性</strong>：Python可以与其他编程语言（如C&#x2F;C++和Java）进行无缝集成，通过编写扩展模块或使用外部接口，可以扩展Python的功能。</p></li><li><p><strong>适合初学者</strong>：Python对于编程初学者来说是一门友好的语言，语法简单易懂，同时提供了丰富的教学资源和学习资料。</p></li></ol><p>综上所述，Python是一种功能强大、易读易写的编程语言，适用于各种应用领域，从数据分析到Web开发，从人工智能到科学计算等。它的特点和优势使得它成为许多开发人员的首选语言。</p><h2 id="Python基础语法"><a href="#Python基础语法" class="headerlink" title="Python基础语法"></a>Python基础语法</h2><h3 id="注释和代码风格规范"><a href="#注释和代码风格规范" class="headerlink" title="注释和代码风格规范"></a>注释和代码风格规范</h3><h4 id="Python注释-在代码里偷偷骂甲方"><a href="#Python注释-在代码里偷偷骂甲方" class="headerlink" title="Python注释|在代码里偷偷骂甲方"></a>Python注释|在代码里偷偷骂甲方</h4><p>在Python中，注释不会影响程序的执行，但是会使代码更易于阅读和理解。</p><p>Python中的注释有<strong>单行注释</strong>和<strong>多行注释</strong>。</p><p><strong>Python中单行注释以<code>#</code>开头</strong>，例如:</p><figure class="highlight plaintext"><figcaption><span>这是一个注释</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs #">print(&quot;Hello, World!&quot;)<br></code></pre></td></tr></table></figure><p><strong>多行注释用三个单引号<code>&#39;&#39;&#39;</code>或者三个双引号<code>&quot;&quot;&quot;</code>将注释括起来</strong><del>(因为被引号括起是字符串类型的提示，但用户并没有用它来赋值或者输出，所以它是无意义的)</del>，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs '''">这是多行注释<br>这是多行注释<br>这是多行注释<br>&#x27;&#x27;&#x27;<br>print(&quot;Hello, World!&quot;)<br></code></pre></td></tr></table></figure><h3 id="Python代码风格-让代码更加优雅"><a href="#Python代码风格-让代码更加优雅" class="headerlink" title="Python代码风格|让代码更加优雅"></a>Python代码风格|让代码更加优雅</h3><p>能让其他人轻松阅读代码总是一个好主意，采用一种好的代码风格对此有很大帮助。</p><p>Python项目大多都遵循PEP8的风格指南：它推行的编码风格易于阅读、赏心悦目。</p><p>以下是该提案中的核心要点：</p><p>1.缩进，用4个空格，不要用制表符。</p><p>​   4个空格是小缩进(更深嵌套)和大缩进(更易阅读)之间的折中方案。制表符会引起混乱，最好别用。</p><p>2.换行，一行不超过79个字符。</p><p>​   这样换行的小屏阅读体验更好，还便于在大屏显示器上并排阅读多个代码文件。</p><p>3.用空行分隔函数和类，及函数内较大的代码块。<br>4.最好把注释放到单独一行。<br>5.使用文档字符串。<br>6.运算符前后，逗号后要用空格，但不要直接在括号内使用：<code>a = f(1, 2) + g(3, 4)</code>。<br>7.类和函数的命名要一致：按惯例，命 名 类 用 UpperCamelCase， 命 名 函 数 与 方 法 用 lowercase_with_underscores。命名方法中第一个参数总是用 self。<br>8.编写用于国际多语环境的代码时，不要用生僻的编码。Python 默认的 UTF-8 或纯 ASCII 可以胜任 各种情况。<br>9.同理，就算多语阅读、维护代码的可能再小，也不要在标识符中使用非 ASCII 字符。</p><h3 id="变量和数据类型"><a href="#变量和数据类型" class="headerlink" title="变量和数据类型"></a>变量和数据类型</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。</p><p>Python是解释型语言，故会自上而下的解释代码，所以要在执行操作前给变量赋值。</p><p>在 Python 中，变量就是变量，它没有类型，我们所说的”类型”是变量所指的内存中对象的类型。</p><p>等号（&#x3D;）用来给变量赋值。</p><p>等号（&#x3D;）运算符左边是一个变量名,等号（&#x3D;）运算符右边是存储在变量中的值。</p><p>Python允许同时为多个变量赋值。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs a">```<br><br>也可以为多个对象指定多个变量。例如：<br><br>```a, b, c = 1, 2, &quot;hi&quot;<br></code></pre></td></tr></table></figure><h4 id="Number-数字"><a href="#Number-数字" class="headerlink" title="Number(数字)"></a>Number(数字)</h4><p>Python支持 <strong>int、float、bool、complex（复数）</strong>。</p><p>在Python 3里，只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。</p><p>像大多数语言一样，数值类型的赋值和计算都是很直观的。</p><p>内置的 type() 函数可以用来查询变量所指的对象类型。</p><p><code>&gt;&gt;&gt; a, b, c, d = 20, 5.5, True, 4+3j</code><br><code>&gt;&gt;&gt; print(type(a), type(b), type(c), type(d))</code><br><code>&lt;class &#39;int&#39;&gt; &lt;class &#39;float&#39;&gt; &lt;class &#39;bool&#39;&gt; &lt;class &#39;complex&#39;&gt;</code></p><p><em><strong>注意：</strong></em>Python3 中，bool 是 int 的子类，True 和 False 可以和数字相加， <strong>True&#x3D;&#x3D;1、False&#x3D;&#x3D;0</strong> <em>会返回</em> <strong>True</strong>，但可以通过 <strong>is</strong> <em>来判断类型。</em></p><p>当你指定一个值时，Number 对象就会被创建：</p><p><code>var1 = 1 var2 = 10</code></p><p>您也可以使用del语句删除一些对象引用。</p><p>del语句的语法是：<br><code>del [var1[, var2[,...varN]]]</code></p><h4 id="数值运算"><a href="#数值运算" class="headerlink" title="数值运算"></a>数值运算</h4><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><figure class="highlight plaintext"><figcaption><span>5 + 4 # 加法</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs \>>>">9<br>\&gt;&gt;&gt; 4.3 - 2 # 减法<br>2.3<br>\&gt;&gt;&gt; 3 * 7 # 乘法<br>21<br>\&gt;&gt;&gt; 2 / 4 # 除法，得到一个浮点数<br>0.5<br>\&gt;&gt;&gt; 2 // 4 # 除法，得到一个整数<br>0<br>\&gt;&gt;&gt; 17 % 3 # 取余<br>2<br>\&gt;&gt;&gt; 2 ** 5 # 乘方<br>32<br></code></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>1、Python可以同时为多个变量赋值，如a, b &#x3D; 1, 2。</p><p>2、一个变量可以通过赋值指向不同类型的对象。</p><p>3、数值的除法包含两个运算符：**&#x2F;** 返回一个浮点数，**&#x2F;&#x2F;** 返回一个整数。</p><p>4、在混合计算时，Python会把整型转换成为浮点数。</p><h5 id="数值类型实例"><a href="#数值类型实例" class="headerlink" title="数值类型实例"></a>数值类型实例</h5><table><thead><tr><th align="left">int</th><th align="left">float</th><th align="left">complex</th></tr></thead><tbody><tr><td align="left">10</td><td align="left">0.0</td><td align="left">3.14j</td></tr><tr><td align="left">100</td><td align="left">15.20</td><td align="left">45.j</td></tr><tr><td align="left">-786</td><td align="left">-21.9</td><td align="left">9.322e-36j</td></tr><tr><td align="left">080</td><td align="left">32.3e+18</td><td align="left">.876j</td></tr><tr><td align="left">-0490</td><td align="left">-90.</td><td align="left">-.6545+0J</td></tr><tr><td align="left">-0x260</td><td align="left">-32.54e100</td><td align="left">3e+26J</td></tr><tr><td align="left">0x69</td><td align="left">70.2E-12</td><td align="left">4.53e-7j</td></tr></tbody></table><p>Python 还支持复数，复数由实数部分和虚数部分构成，可以用 <strong>a + bj</strong>，或者 <strong>complex(a,b)</strong> 表示， 复数的实部 <strong>a</strong> 和虚部 <strong>b</strong> 都是浮点型。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Python简介&quot;&gt;&lt;a href=&quot;#Python简介&quot; class=&quot;headerlink&quot; title=&quot;Python简介&quot;&gt;&lt;/a&gt;Python简介&lt;/h2&gt;&lt;h3 id=&quot;Python的起源和发展&quot;&gt;&lt;a href=&quot;#Python的起源和发展&quot; cla</summary>
      
    
    
    
    
    <category term="Python入门" scheme="http://example.com/tags/Python%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Python入门笔记1（数据类型及相关操作）</title>
    <link href="http://example.com/2023/11/12/Python%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%A4%84%E7%90%86/"/>
    <id>http://example.com/2023/11/12/Python%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%A4%84%E7%90%86/</id>
    <published>2023-11-12T07:25:57.000Z</published>
    <updated>2023-11-13T14:15:49.512Z</updated>
    
    
    
    
    
    <category term="Python入门" scheme="http://example.com/tags/Python%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
</feed>
