<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yu‘s Nomadic City</title>
  
  <subtitle>我的代码小栈</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-11-12T15:44:05.694Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Francis Wong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python入门笔记1（数据类型及相关操作）</title>
    <link href="http://example.com/2023/11/12/Python%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%A4%84%E7%90%86/"/>
    <id>http://example.com/2023/11/12/Python%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%A4%84%E7%90%86/</id>
    <published>2023-11-12T07:25:57.000Z</published>
    <updated>2023-11-12T15:44:05.694Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1.引言"></a>1.引言</h2><p>Python中常见的标准数据类型有：<strong>Number</strong>、<strong>String</strong>、<strong>bool</strong>、<strong>List</strong>、<strong>Tuple</strong>、<strong>Set</strong>、<strong>Dictionary</strong></p><p>其中有<strong>不可变数据（3个）</strong>和<strong>可变数据（3个）</strong></p><table><thead><tr><th align="center"></th><th></th></tr></thead><tbody><tr><td align="center"><strong>可变数据</strong></td><td><strong>List、Dictionary、Set</strong></td></tr><tr><td align="center"><strong>不可变数据</strong></td><td><strong>Number、String、Tuple</strong></td></tr></tbody></table><h2 id="2-具体描述及相关操作"><a href="#2-具体描述及相关操作" class="headerlink" title="2.具体描述及相关操作"></a>2.具体描述及相关操作</h2><h3 id="2-1-Number（数）"><a href="#2-1-Number（数）" class="headerlink" title="2.1 Number（数）"></a>2.1 Number（数）</h3><p>在Python中，Number类支持<em>int</em>、<em>float</em>、<em>bool</em>、<em>complex</em>四种类型。</p><h4 id="2-1-1-Complex类型"><a href="#2-1-1-Complex类型" class="headerlink" title="2.1.1 Complex类型"></a>2.1.1 Complex类型</h4><p>Python中支持Complex（复数）类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 复数格式">a + bj 或 complex(a, b)<br></code></pre></td></tr></table></figure><p>复数由实部a和虚部b组成（表达方式如上）</p><h4 id="2-1-2-浮点型的科学计数法"><a href="#2-1-2-浮点型的科学计数法" class="headerlink" title="2.1.2 浮点型的科学计数法"></a>2.1.2 浮点型的科学计数法</h4><p>E是指数，指底数为10，E后边的数就是10的多少次幂。</p><h3 id="2-2-String（字符串）"><a href="#2-2-String（字符串）" class="headerlink" title="2.2 String（字符串）"></a>2.2 String（字符串）</h3><h4 id="2-2-1字符串的特点"><a href="#2-2-1字符串的特点" class="headerlink" title="2.2.1字符串的特点"></a>2.2.1字符串的特点</h4><p>Python中的字符串用单引号<em>‘</em>或双引号<em>“</em>括起来，同时使用反斜杠\转义特殊字符。字符串是不可变数据（<em>但可以通过切片和拼接修改字符串</em>），其本身可以运用大部分运算符（或操作符）。</p><h4 id="2-2-2-字符串的切片和拼接"><a href="#2-2-2-字符串的切片和拼接" class="headerlink" title="2.2.2 字符串的切片和拼接"></a>2.2.2 字符串的切片和拼接</h4><p>“切片”和“拼接”将在List&amp;Tuple章节中详细解释。接下来是实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs example1">&gt;&gt;&gt; str1 = &#x27;Hello,world!&#x27;<br>&gt;&gt;&gt; str1 = str1[:5] + &#x27;,Python!&#x27;<br>&gt;&gt;&gt; str1<br>&#x27;Hello,Python!&#x27;<br></code></pre></td></tr></table></figure><p>这里需要注意的是，切片操作其实只改变了一个<em>str1</em>的副本（或拷贝），即原来的旧字符串其实还在，只不过我们将变量名与新字符串链接。旧字符串失去了变量名的引用后，就被Python的垃圾回收机制释放掉了。</p><h3 id="2-3-Bool（布尔类型）"><a href="#2-3-Bool（布尔类型）" class="headerlink" title="2.3 Bool（布尔类型）"></a>2.3 Bool（布尔类型）</h3><p>在Python中，bool是int的子类，<em>True和False可以和数字相加</em>，可以通过<strong>is</strong>来判断类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&gt;&gt;&gt; issubclass(bool, int)<br>True<br></code></pre></td></tr></table></figure><p>bool即True或False。</p><p>布尔类型可以用来控制程序的流程，比如判断某个条件是否成立，或者在某个条件满足时执行某段代码。</p><p><strong>注意：在Python中，所有非零的数字和非空的字符串、列表、元组等数据类型都被视为True，只有0、列表、空元组等被视为False</strong></p><h3 id="2-4-类型转换及获得关于类型的信息"><a href="#2-4-类型转换及获得关于类型的信息" class="headerlink" title="2.4 类型转换及获得关于类型的信息"></a>2.4 类型转换及获得关于类型的信息</h3><h4 id="2-4-1-类型转换"><a href="#2-4-1-类型转换" class="headerlink" title="2.4.1 类型转换"></a>2.4.1 类型转换</h4><p>主要为int、float、str之间的转换，语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&gt;&gt;&gt; x = 6.40<br>&gt;&gt;&gt; x = int(x)<br>&gt;&gt;&gt; x<br>6<br></code></pre></td></tr></table></figure><h4 id="2-4-2-获得关于类型的信息"><a href="#2-4-2-获得关于类型的信息" class="headerlink" title="2.4.2 获得关于类型的信息"></a>2.4.2 获得关于类型的信息</h4><ol><li><p>type( )</p></li><li><p>isinstance( ) [建议]：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">isintance(待确定数据,数据类型)<br>通常用print输出<br></code></pre></td></tr></table></figure></li></ol><h3 id="2-5-List（列表）-Tuple（元组）"><a href="#2-5-List（列表）-Tuple（元组）" class="headerlink" title="2.5 List（列表）&amp; Tuple（元组）"></a>2.5 List（列表）&amp; Tuple（元组）</h3><p>列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）</p><h4 id="2-5-1-创建列表"><a href="#2-5-1-创建列表" class="headerlink" title="2.5.1 创建列表"></a>2.5.1 创建列表</h4><p>​变量名 &#x3D; [val1, val2, val3,…]</p><p>​empty &#x3D; []</p><h4 id="2-5-2-添加元素"><a href="#2-5-2-添加元素" class="headerlink" title="2.5.2 添加元素"></a>2.5.2 添加元素</h4><ol><li>list.attend( ) 加（）中元素至列表末（只支持单个参数）</li><li>list.extend( ) 加（）中列表扩充至另一列表末</li><li>list.insert(x, e) 第一个参数指定待插入的位置；第二个参数指定待插入的元素，例：</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&gt;&gt;&gt; number = [0, 1, 2, 3, 4]<br>&gt;&gt;&gt; number.insert(-1, 3.5)<br>&gt;&gt;&gt; number<br>[0, 1, 2, 3, 3.5, 4]<br></code></pre></td></tr></table></figure><h4 id="2-5-3-获取元素"><a href="#2-5-3-获取元素" class="headerlink" title="2.5.3 获取元素"></a>2.5.3 获取元素</h4><ol><li><p>语法：list[索引值]</p></li><li><p>访问末元素：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">1. n = len(list)<br>   n = int(n)<br>   list(n - 1)<br>2.list[-1]<br></code></pre></td></tr></table></figure></li></ol><h4 id="2-5-4-调换元素"><a href="#2-5-4-调换元素" class="headerlink" title="2.5.4 调换元素"></a>2.5.4 调换元素</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">1(正经). temp = list[1]<br>list[1] = list[3]<br>list[3] = temp<br>2(偷懒). list[1], list[3] = list[3], list[1]<br></code></pre></td></tr></table></figure><h4 id="2-5-5-随机输出"><a href="#2-5-5-随机输出" class="headerlink" title="2.5.5 随机输出"></a>2.5.5 随机输出</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">import random<br>list = [1, 2, 3, 4, 5, 6, 7, 8]<br>random.choice(list)<br></code></pre></td></tr></table></figure><h4 id="2-5-6-删除元素"><a href="#2-5-6-删除元素" class="headerlink" title="2.5.6 删除元素"></a>2.5.6 删除元素</h4><ol><li>remove( ): list.remove(val_name) 直接删除</li><li>pop( ): list.pop(index_num) 删除最末元素，并输出该元素</li><li>del: del list[index_num] 直接删除（为单独语句）</li></ol><h4 id="2-5-7-Slice（列表切片）"><a href="#2-5-7-Slice（列表切片）" class="headerlink" title="2.5.7 Slice（列表切片）"></a>2.5.7 Slice（列表切片）</h4><p>实际上，切片不会修改列表自身的组成结构，而是创建了部分列表的副本</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">list[start, stop, step]<br></code></pre></td></tr></table></figure><p>当使用list[ : : -1]时，可以实现列表的反转。</p><p><strong>注意：对列表切片的操作会直接作用于原始列表以确保自身有意义</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">list = [1, 2, 3, 4, 5, 6, 7, 8, 9]<br></code></pre></td></tr></table></figure><ol><li><p>删除切片元素:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&gt;&gt;&gt; del list[ : : 2]<br>[2, 4, 6, 8]<br></code></pre></td></tr></table></figure></li><li><p>切片赋值：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">&gt;&gt;&gt; list[0: 2] = [0, 8]<br>[0, 8, 3, 4, 5, 6, 7, 8, 9]<br></code></pre></td></tr></table></figure></li></ol><h4 id="2-5-8-遍历列表"><a href="#2-5-8-遍历列表" class="headerlink" title="2.5.8 遍历列表"></a>2.5.8 遍历列表</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">for element in list:<br>if element ____:<br>print(element)<br></code></pre></td></tr></table></figure><h4 id="2-5-9-关于列表的方法"><a href="#2-5-9-关于列表的方法" class="headerlink" title="2.5.9 关于列表的方法"></a>2.5.9 关于列表的方法</h4><p>count( ) 方法：统计某个元素在列表中出现的次数</p><p>index( ) 方法：返回某个元素在列表中第一次出现的索引值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">list.index(x, start, stop)<br></code></pre></td></tr></table></figure><p>reverse( ) 方法：将整个列表翻转</p><p>sort( )方法：对列表元素进行排序</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">sort(func, key, reverse)<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-引言&quot;&gt;&lt;a href=&quot;#1-引言&quot; class=&quot;headerlink&quot; title=&quot;1.引言&quot;&gt;&lt;/a&gt;1.引言&lt;/h2&gt;&lt;p&gt;Python中常见的标准数据类型有：&lt;strong&gt;Number&lt;/strong&gt;、&lt;strong&gt;String&lt;/stro</summary>
      
    
    
    
    
    <category term="Python入门" scheme="http://example.com/tags/Python%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
</feed>
