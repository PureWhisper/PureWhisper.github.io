<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yu‘s Nomadic City</title>
  
  <subtitle>我的代码小栈</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-11-12T13:47:49.645Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Francis Wong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python入门笔记1（数据类型及相关操作）</title>
    <link href="http://example.com/2023/11/12/Python%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%A4%84%E7%90%86/"/>
    <id>http://example.com/2023/11/12/Python%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%8F%8A%E5%A4%84%E7%90%86/</id>
    <published>2023-11-12T07:25:57.000Z</published>
    <updated>2023-11-12T13:47:49.645Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-引言"><a href="#1-引言" class="headerlink" title="1.引言"></a>1.引言</h2><p>Python中常见的标准数据类型有：<strong>Number</strong>、<strong>String</strong>、<strong>bool</strong>、<strong>List</strong>、<strong>Tuple</strong>、<strong>Set</strong>、<strong>Dictionary</strong></p><p>其中有<strong>不可变数据（3个）</strong>和<strong>可变数据（3个）</strong></p><table><thead><tr><th align="center"></th><th></th></tr></thead><tbody><tr><td align="center"><strong>可变数据</strong></td><td><strong>List、Dictionary、Set</strong></td></tr><tr><td align="center"><strong>不可变数据</strong></td><td><strong>Number、String、Tuple</strong></td></tr></tbody></table><h2 id="2-具体描述及相关操作"><a href="#2-具体描述及相关操作" class="headerlink" title="2.具体描述及相关操作"></a>2.具体描述及相关操作</h2><h3 id="2-1-Number（数）"><a href="#2-1-Number（数）" class="headerlink" title="2.1 Number（数）"></a>2.1 Number（数）</h3><p>在Python中，Number类支持<em>int</em>、<em>float</em>、<em>bool</em>、<em>complex</em>四种类型。</p><h4 id="2-1-1-Complex类型"><a href="#2-1-1-Complex类型" class="headerlink" title="2.1.1 Complex类型"></a>2.1.1 Complex类型</h4><p>Python中支持Complex（复数）类型：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 复数格式">a + bj 或 complex(a, b)<br></code></pre></td></tr></table></figure><p>复数由实部a和虚部b组成（表达方式如上）</p><h4 id="2-1-2-浮点型的科学计数法"><a href="#2-1-2-浮点型的科学计数法" class="headerlink" title="2.1.2 浮点型的科学计数法"></a>2.1.2 浮点型的科学计数法</h4><p>E是指数，指底数为10，E后边的数就是10的多少次幂。</p><h3 id="2-2-String（字符串）"><a href="#2-2-String（字符串）" class="headerlink" title="2.2 String（字符串）"></a>2.2 String（字符串）</h3><h4 id="2-2-1字符串的特点"><a href="#2-2-1字符串的特点" class="headerlink" title="2.2.1字符串的特点"></a>2.2.1字符串的特点</h4><p>字符串是不可变数据（<em>但可以通过切片和拼接修改字符串</em>），其本身可以运用大部分运算符（或操作符）。</p><h4 id="2-2-2-字符串的切片和拼接"><a href="#2-2-2-字符串的切片和拼接" class="headerlink" title="2.2.2 字符串的切片和拼接"></a>2.2.2 字符串的切片和拼接</h4><p>“切片”和“拼接”将在List&amp;Tuple章节中详细解释。接下来是实例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs example1">&gt;&gt;&gt; str1 = &#x27;Hello,world!&#x27;<br>&gt;&gt;&gt; str1 = str1[:5] + &#x27;,Python!&#x27;<br>&gt;&gt;&gt; str1<br>&#x27;Hello,Python!&#x27;<br></code></pre></td></tr></table></figure><p>这里需要注意的是，切片操作其实只改变了一个<em>str1</em>的副本（或拷贝），即原来的旧字符串其实还在，只不过我们将变量名与新字符串链接。旧字符串失去了变量名的引用后，就被Python的垃圾回收机制释放掉了。</p><h4 id="2-2-3-各种内置方法"><a href="#2-2-3-各种内置方法" class="headerlink" title="2.2.3 各种内置方法"></a>2.2.3 各种内置方法</h4><table><thead><tr><th align="left">方法</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left"></td><td align="left"></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-引言&quot;&gt;&lt;a href=&quot;#1-引言&quot; class=&quot;headerlink&quot; title=&quot;1.引言&quot;&gt;&lt;/a&gt;1.引言&lt;/h2&gt;&lt;p&gt;Python中常见的标准数据类型有：&lt;strong&gt;Number&lt;/strong&gt;、&lt;strong&gt;String&lt;/stro</summary>
      
    
    
    
    
    <category term="Python入门" scheme="http://example.com/tags/Python%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
</feed>
